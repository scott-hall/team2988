package edu.clarke.team2988.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import edu.clarke.team2988.framework.OI;

import edu.clarke.team2988.subsystems.ShooterSubsystem;
import edu.clarke.team2988.subsystems.DriveSubsystem;
import edu.clarke.team2988.subsystems.CompressorSubsystem;

/**
 * The base for all commands. All atomic commands should subclass CommandBase.
 * CommandBase stores creates and stores each control system. To access a
 * subsystem elsewhere in your code in your code use CommandBase.exampleSubsystem
 * @author Author
 */
public abstract class CommandBase extends Command {

    public static OI oi;

    /* --------------------------------------------------------------------- */
    /*  CREATE A SINGLE STATIC INSTANCE OF ALL OF YOUR SUBSYSTEMS            */
    /* --------------------------------------------------------------------- */
    private static ShooterSubsystem shooterSubsystem = new ShooterSubsystem();
    private static DriveSubsystem driveSubsystem = new DriveSubsystem();
    private static CompressorSubsystem compressorSubsystem = new CompressorSubsystem();
    private static CompressorCommand compressorCommand = new CompressorCommand();
    private static DriveCommand driveCommand = new DriveCommand();



    /* ---------------------------------------------------------------------- */

    public static void init() {
        
        /* ------------------------------------------------------------------ */
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();

        // Show what command your subsystem is running on the SmartDashboard
        SmartDashboard.putData(shooterSubsystem);
        SmartDashboard.putData(driveSubsystem);

    }

    /* ---------------------------------------------------------------------- */

    public static CompressorSubsystem getCompressorSubsystem(){
        return compressorSubsystem;
    }
    /* ---------------------------------------------------------------------- */

    public static ShooterSubsystem getShooterSubsystem(){
        return shooterSubsystem;
    }
    /* ---------------------------------------------------------------------- */

     public static DriveSubsystem getDriveSubsystem(){
        return driveSubsystem;
    }
    /* ---------------------------------------------------------------------- */

    public CommandBase(String name) {
        super(name);
    }

    /* ---------------------------------------------------------------------- */

    public CommandBase() {
        super();
    }
}
